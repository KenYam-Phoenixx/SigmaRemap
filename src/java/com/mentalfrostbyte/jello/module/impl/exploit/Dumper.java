package com.mentalfrostbyte.jello.module.impl.exploit;

import com.mentalfrostbyte.Client;
import com.mentalfrostbyte.jello.event.EventTarget;
import com.mentalfrostbyte.jello.event.impl.ReceivePacketEvent;
import com.mentalfrostbyte.jello.module.Module;
import com.mentalfrostbyte.jello.module.ModuleCategory;
import com.mentalfrostbyte.jello.util.MultiUtilities;
import com.mojang.brigadier.suggestion.Suggestion;
import net.minecraft.network.play.server.STabCompletePacket;
import net.minecraft.network.play.client.CTabCompletePacket;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class Dumper extends Module {
    private String currentCharacter = null;
    private final List<String> pluginList = new ArrayList<>();
    private final List<String> commandList = new ArrayList<>();

    public Dumper() {
        super(ModuleCategory.EXPLOIT, "Dumper", "Dumps the plugins/commands from the server");
    }

    @Override
    public void onEnable() {
        this.currentCharacter = null;
        this.pluginList.clear();
        this.commandList.clear();
        MultiUtilities.addChatMessage("Dumping...");
        this.sendTabCompleteRequest("");
    }

    @Override
    public void onDisable() {
        if (pluginList.isEmpty() && commandList.isEmpty()) {
            MultiUtilities.addChatMessage("No plugins or commands were dumped.");
            return;
        }

        MultiUtilities.addChatMessage("§aPlugins:");
        StringBuilder pluginBuilder = new StringBuilder();

        for (String plugin : this.pluginList) {
            pluginBuilder.append(plugin).append(", ");
        }

        if (pluginBuilder.length() > 2) {
            String pluginDump = pluginBuilder.substring(0, pluginBuilder.length() - 2);
            MultiUtilities.addChatMessage(pluginDump);
        }

        MultiUtilities.addChatMessage("§aCommands:");
        StringBuilder commandBuilder = new StringBuilder();

        for (String command : this.commandList) {
            commandBuilder.append(command).append(", ");
        }

        if (commandBuilder.length() > 2) {
            String commandDump = commandBuilder.substring(0, commandBuilder.length() - 2);
            MultiUtilities.addChatMessage(commandDump);
        }

        try {
            File dumpFile = new File(Client.getInstance().getFile() + "/plugin_and_command_dump.txt");
            if (!dumpFile.exists()) {
                dumpFile.createNewFile();
            }

            FileWriter writer = new FileWriter(dumpFile);
            writer.write("Plugins: " + pluginBuilder + "\n\n");
            writer.write("Commands: " + commandBuilder + "\n");
            writer.close();
            MultiUtilities.addChatMessage("§bDumped to: " + dumpFile.getAbsolutePath());
        } catch (IOException e) {
            MultiUtilities.addChatMessage("§cCould not save dump file.");
            throw new RuntimeException(e);
        }
    }

    private String getNextCharacter() {
        if (this.currentCharacter == null || this.currentCharacter.isEmpty()) {
            return "a";
        } else if (!this.currentCharacter.equals("z")) {
            return Character.toString((char) (this.currentCharacter.charAt(0) + 1));
        } else {
            return null;
        }
    }

    @EventTarget
    private void onPacketRecieve(ReceivePacketEvent event) {
        if (this.isEnabled() && event.getPacket() instanceof STabCompletePacket) {
            STabCompletePacket packet = (STabCompletePacket) event.getPacket();
            for (Suggestion suggestion : packet.getSugestions().getList()) {
                String[] parts = suggestion.getText().split(":");
                if (parts.length > 1) {
                    String plugin = parts[0].substring(1);
                    if (!plugin.equals("minecraft") && !plugin.equals("bukkit") && !this.pluginList.contains(plugin)) {
                        this.pluginList.add(plugin);
                    }
                }

                if (!this.commandList.contains(suggestion.getText())) {
                    this.commandList.add(suggestion.getText());
                }
            }

            String nextChar = this.getNextCharacter();
            if (nextChar == null) {
                this.setState(false);
            } else {
                this.sendTabCompleteRequest(nextChar);
            }
        }
    }

    private void sendTabCompleteRequest(String character) {
        this.currentCharacter = character;
        mc.getConnection().sendPacket(new CTabCompletePacket(0, "/" + character));
    }
}
