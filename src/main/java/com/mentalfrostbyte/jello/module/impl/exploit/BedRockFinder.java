package com.mentalfrostbyte.jello.module.impl.exploit;

import com.mentalfrostbyte.jello.module.Module;
import com.mentalfrostbyte.jello.module.ModuleCategory;
import com.mentalfrostbyte.jello.module.util.InDevelopment;
import mapped.Class9499;

@InDevelopment
public class BedRockFinder extends Module {
    private static final long SEED_A = 341873128712L;
    private static final long SEED_B = 132897987541L;
    private static final long MASK = 281474976710655L;
    private static final long MULT_A = 709490313259657689L;
    private static final long ADD_A = 1748772144486964054L;
    private static final long MULT_B = 5985058416696778513L;
    private static final long ADD_B = -8542997297661424380L;
    private static final int SIZE = 16;
    private static final int WIDTH = 48;

    public BedRockFinder() {
        super(ModuleCategory.EXPLOIT, "BedRockFinder", "Finds cords based on bedrock patterns");
    }

    public static void printPattern(long seed1, long seed2) {
        long state = seed1 * SEED_A + seed2 * SEED_B ^ 25214903917L;
        char[] row = new char[SIZE + 1];
        row[SIZE] = '\n';

        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                state = state * MULT_A + ADD_A;
                state &= MASK;
                row[j] = (4L > (state >> 17) % 5L) ? ' ' : '*';
                state = state * MULT_B + ADD_B;
            }
            System.out.print(row);
        }
    }

    @Override
    public void onEnable() {
        int[] pattern = {
                0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,
                1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                1, 0, 0, 0
        };
        System.out.println(findPattern(pattern, 8, 8, 38, -55));
    }

    private Class9499 findPattern(int[] pattern, int height, int width, int offsetX, int offsetY) {
        int[] grid = new int[WIDTH * WIDTH];
        generatePatternGrid(grid, offsetX, offsetY);

        for (int y = 0; y <= WIDTH - height; y++) {
            for (int x = 0; x <= WIDTH - width; x++) {
                if (matchesPattern(pattern, grid, x, y, width, height)) {
                    return new Class9499(x, y);
                }
            }
        }
        return null;
    }

    private void generatePatternGrid(int[] grid, int offsetX, int offsetY) {
        for (long dy = -1L; dy <= 1L; dy++) {
            for (long dx = -1L; dx <= 1L; dx++) {
                long x = offsetX + dx;
                long y = offsetY + dy;
                long state = x * SEED_A + y * SEED_B ^ 25214903917L;

                for (int i = 0; i < SIZE; i++) {
                    for (int j = 0; j < SIZE; j++) {
                        state = state * MULT_A + ADD_A;
                        state &= MASK;
                        grid[(int)((16 * (dy + 1L) + i) * WIDTH + 16 * (dx + 1L) + j)] =
                                (4L > (state >> 17) % 5L) ? 0 : 1;
                        state = state * MULT_B + ADD_B;
                    }
                }
            }
        }
    }

    private boolean matchesPattern(int[] pattern, int[] grid, int startX, int startY, int width, int height) {
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                if (pattern[y * width + x] != grid[(startY + y) * WIDTH + (startX + x)]) {
                    return false;
                }
            }
        }
        return true;
    }
}
