package mapped;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class Class6985 {
   private static final int[] field30214 = new int[]{
      8184,
      8388568,
      268435426,
      268435427,
      268435428,
      268435429,
      268435430,
      268435431,
      268435432,
      16777194,
      1073741820,
      268435433,
      268435434,
      1073741821,
      268435435,
      268435436,
      268435437,
      268435438,
      268435439,
      268435440,
      268435441,
      268435442,
      1073741822,
      268435443,
      268435444,
      268435445,
      268435446,
      268435447,
      268435448,
      268435449,
      268435450,
      268435451,
      20,
      1016,
      1017,
      4090,
      8185,
      21,
      248,
      2042,
      1018,
      1019,
      249,
      2043,
      250,
      22,
      23,
      24,
      0,
      1,
      2,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      92,
      251,
      32764,
      32,
      4091,
      1020,
      8186,
      33,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      252,
      115,
      253,
      8187,
      524272,
      8188,
      16380,
      34,
      32765,
      3,
      35,
      4,
      36,
      5,
      37,
      38,
      39,
      6,
      116,
      117,
      40,
      41,
      42,
      7,
      43,
      118,
      44,
      8,
      9,
      45,
      119,
      120,
      121,
      122,
      123,
      32766,
      2044,
      16381,
      8189,
      268435452,
      1048550,
      4194258,
      1048551,
      1048552,
      4194259,
      4194260,
      4194261,
      8388569,
      4194262,
      8388570,
      8388571,
      8388572,
      8388573,
      8388574,
      16777195,
      8388575,
      16777196,
      16777197,
      4194263,
      8388576,
      16777198,
      8388577,
      8388578,
      8388579,
      8388580,
      2097116,
      4194264,
      8388581,
      4194265,
      8388582,
      8388583,
      16777199,
      4194266,
      2097117,
      1048553,
      4194267,
      4194268,
      8388584,
      8388585,
      2097118,
      8388586,
      4194269,
      4194270,
      16777200,
      2097119,
      4194271,
      8388587,
      8388588,
      2097120,
      2097121,
      4194272,
      2097122,
      8388589,
      4194273,
      8388590,
      8388591,
      1048554,
      4194274,
      4194275,
      4194276,
      8388592,
      4194277,
      4194278,
      8388593,
      67108832,
      67108833,
      1048555,
      524273,
      4194279,
      8388594,
      4194280,
      33554412,
      67108834,
      67108835,
      67108836,
      134217694,
      134217695,
      67108837,
      16777201,
      33554413,
      524274,
      2097123,
      67108838,
      134217696,
      134217697,
      67108839,
      134217698,
      16777202,
      2097124,
      2097125,
      67108840,
      67108841,
      268435453,
      134217699,
      134217700,
      134217701,
      1048556,
      16777203,
      1048557,
      2097126,
      4194281,
      2097127,
      2097128,
      8388595,
      4194282,
      4194283,
      33554414,
      33554415,
      16777204,
      16777205,
      67108842,
      8388596,
      67108843,
      134217702,
      67108844,
      67108845,
      134217703,
      134217704,
      134217705,
      134217706,
      134217707,
      268435454,
      134217708,
      134217709,
      134217710,
      134217711,
      134217712,
      67108846
   };
   private static final byte[] field30215 = new byte[]{
      13,
      23,
      28,
      28,
      28,
      28,
      28,
      28,
      28,
      24,
      30,
      28,
      28,
      30,
      28,
      28,
      28,
      28,
      28,
      28,
      28,
      28,
      30,
      28,
      28,
      28,
      28,
      28,
      28,
      28,
      28,
      28,
      6,
      10,
      10,
      12,
      13,
      6,
      8,
      11,
      10,
      10,
      8,
      11,
      8,
      6,
      6,
      6,
      5,
      5,
      5,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      7,
      8,
      15,
      6,
      12,
      10,
      13,
      6,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      8,
      7,
      8,
      13,
      19,
      13,
      14,
      6,
      15,
      5,
      6,
      5,
      6,
      5,
      6,
      6,
      6,
      5,
      7,
      7,
      6,
      6,
      6,
      5,
      6,
      7,
      6,
      5,
      5,
      6,
      7,
      7,
      7,
      7,
      7,
      15,
      11,
      14,
      13,
      28,
      20,
      22,
      20,
      20,
      22,
      22,
      22,
      23,
      22,
      23,
      23,
      23,
      23,
      23,
      24,
      23,
      24,
      24,
      22,
      23,
      24,
      23,
      23,
      23,
      23,
      21,
      22,
      23,
      22,
      23,
      23,
      24,
      22,
      21,
      20,
      22,
      22,
      23,
      23,
      21,
      23,
      22,
      22,
      24,
      21,
      22,
      23,
      23,
      21,
      21,
      22,
      21,
      23,
      22,
      23,
      23,
      20,
      22,
      22,
      22,
      23,
      22,
      22,
      23,
      26,
      26,
      20,
      19,
      22,
      23,
      22,
      25,
      26,
      26,
      26,
      27,
      27,
      26,
      24,
      25,
      19,
      21,
      26,
      27,
      27,
      26,
      27,
      24,
      21,
      21,
      26,
      26,
      28,
      27,
      27,
      27,
      20,
      24,
      20,
      21,
      22,
      21,
      21,
      23,
      22,
      22,
      25,
      25,
      24,
      24,
      26,
      23,
      26,
      27,
      26,
      26,
      27,
      27,
      27,
      27,
      27,
      28,
      27,
      27,
      27,
      27,
      27,
      26
   };
   private static final Class6985 field30216 = new Class6985();
   private final Class7045 field30217 = new Class7045();

   public static Class6985 method21600() {
      return field30216;
   }

   private Class6985() {
      this.method21604();
   }

   public void method21601(Class2003 var1, Class1733 var2) throws IOException {
      long var5 = 0L;
      byte var7 = 0;

      for (int var8 = 0; var8 < var1.method8458(); var8++) {
         int var9 = var1.method8457(var8) & 255;
         int var10 = field30214[var9];
         byte var11 = field30215[var9];
         var5 <<= var11;
         var5 |= (long)var10;
         var7 += var11;

         while (var7 >= 8) {
            var7 -= 8;
            var2.method7570((int)(var5 >> var7));
         }
      }

      if (var7 > 0) {
         var5 <<= 8 - var7;
         var5 |= (long)(255 >>> var7);
         var2.method7570((int)var5);
      }
   }

   public int method21602(Class2003 var1) {
      long var4 = 0L;

      for (int var6 = 0; var6 < var1.method8458(); var6++) {
         int var7 = var1.method8457(var6) & 255;
         var4 += (long)field30215[var7];
      }

      return (int)(var4 + 7L >> 3);
   }

   public byte[] method21603(byte[] var1) {
      ByteArrayOutputStream var4 = new ByteArrayOutputStream();
      Class7045 var5 = this.field30217;
      int var6 = 0;
      int var7 = 0;

      for (int var8 = 0; var8 < var1.length; var8++) {
         int var9 = var1[var8] & 255;
         var6 = var6 << 8 | var9;
         var7 += 8;

         while (var7 >= 8) {
            int var10 = var6 >>> var7 - 8 & 0xFF;
            var5 = var5.field30431[var10];
            if (var5.field30431 != null) {
               var7 -= 8;
            } else {
               var4.write(var5.field30432);
               var7 -= var5.field30433;
               var5 = this.field30217;
            }
         }
      }

      while (var7 > 0) {
         int var12 = var6 << 8 - var7 & 0xFF;
         var5 = var5.field30431[var12];
         if (var5.field30431 != null || var5.field30433 > var7) {
            break;
         }

         var4.write(var5.field30432);
         var7 -= var5.field30433;
         var5 = this.field30217;
      }

      return var4.toByteArray();
   }

   private void method21604() {
      for (int var3 = 0; var3 < field30215.length; var3++) {
         this.method21605(var3, field30214[var3], field30215[var3]);
      }
   }

   private void method21605(int var1, int var2, byte var3) {
      Class7045 var6 = new Class7045(var1, var3);
      Class7045 var7 = this.field30217;

      while (var3 > 8) {
         var3 = (byte)(var3 - 8);
         int var8 = var2 >>> var3 & 0xFF;
         if (var7.field30431 == null) {
            throw new IllegalStateException("invalid dictionary: prefix not unique");
         }

         if (var7.field30431[var8] == null) {
            var7.field30431[var8] = new Class7045();
         }

         var7 = var7.field30431[var8];
      }

      int var12 = 8 - var3;
      int var9 = var2 << var12 & 0xFF;
      int var10 = 1 << var12;

      for (int var11 = var9; var11 < var9 + var10; var11++) {
         var7.field30431[var11] = var6;
      }
   }
}
